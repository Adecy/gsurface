seperate plot function

save pictures

animation

animation convert to MP4 : https://stackoverflow.com/questions/24958669/saving-a-mayavi-animation

save config (create a design pattern for this kind of system)

surface translation / rotation

add potential/work calculation to forces

checker la médianne plutot que le max des erreurs pour certaines surfaces avec singularitées

Surfaces :
- https://mathcurve.com/surfaces/conoide_parabolique/conoide_parabolique.shtml

Force(model1, model2, stiffness)

Add surface : try Trefoil knot : https://en.wikipedia.org/wiki/Trefoil_knot
Add surface : Dupin Cyclide : https://en.wikipedia.org/wiki/Dupin_cyclide

Define u0, du0, v0 and dv0 from real speed Vx, Vy, Vz or V(dir u), V(dir v)
    V = J @ dw.T => dw = f?(V, J) <-- find this funtion "f"

Surface Hyperboloid :
    https://fr.wikipedia.org/wiki/Hyperbolo%C3%AFde

Ajouter d'autres surfaces quadratiques :
    https://fr.wikipedia.org/wiki/Quadrique
    https://en.wikipedia.org/wiki/Quadric

To this with gravity 1/r^2 : https://mathcurve.com/surfaces/attraction/attraction.shtml

Eval delay and nb of point in order to always have the speed of animation

Add solid specifics caracteristics as em charge, mass, etc... usefull to evaluate force


-----------------------
https://www.youtube.com/watch?v=xzVk56EKBUI
    Courbure de Gauss : https://fr.wikipedia.org/wiki/Courbure_de_Gauss
    Courbure de Ricci : https://fr.wikipedia.org/wiki/Courbure_scalaire#:~:text=En%20g%C3%A9om%C3%A9trie%20riemannienne%2C%20la%20courbure,courbure%20d'une%20vari%C3%A9t%C3%A9%20riemannienne.

Numpy issue after 1.19.3


Appeler np.array lors de chaque instantiation __init__ sur tous les paramètres de type np.ndarray

Vérifier les egualité entre deux modèles/structures/forces/surfaces
    # check equality between two objects
    # treat numpy all(a == b) case

    # maybe add this method to SerializableInterface

Add S0 (x0, y0, z0), V0 (dx0, dy0, dz0) to Solid Class

graph show nodes and vertices as png

Serialze interface method that save only some parameters to avoid the use of **kargs in __init__ method
 from list of str parameters

Change transformation management:
- add transformation strategy where

complete serialization with Interacted models and structures

setup equal between objects
- Forces, Surfaces, ...

Calculate distance betweens two points on surface

Think about an energy solver :
    d Ec = d Ep = dt * P = dt V . F = - dl grad F

------ NOTE OF JAN 21 -----

Add Rotation Spring Sensor in a Structure model
Add geodesic findings for any surface.
Add position to parameters function in order to find surface parameters that actually represent the point in the 3D surface.
change Surface validation with unit test library
Create a jupyter in order to explain how to create new models over this library with specificities
Create following class:
InteractionfromForce(force: Force):
		self.force = Force

		def _force(M1, M2):
			return self.force.eval(M1 - M2)
Define M1 - M2 method that calculate (S1 - S2, V1 - V2, t, …)

Simplify Force parameters, among w, dw, t, S, J, H, some parameters are never used (or in very special cases). We either decide to be exhaustive and keep all or we assume we need to define only physics forces and we remove w, dw and H, and we substitude J by V = dw @ V. In this case we will only have, t, S, V which is normally enough to describe any force.
argument : u, dw depends of the surface and are object specfic parameters while t is a global parameter and S and V are solid parameters.
We should not need u and dw
We need to remove None default parameters for S and V because, theses parameters exists
necessarily even if they are not used by the forces functions

In ModelEvalState	we need to determine which parameters are optional and which don’t

Enhance or delete ModelsEvalStates in imodel.py (this model gather too different object types, time, surface specific objects J, H, solid specific S, J)
maybe create tSV or TSV type for this

Maybe create type for every vector as :

SPEED = np.ndarray
JACOBIAN = np.ndarray
HESSIAN = np.ndarray
POSITION = np.ndarray

# S : Surface, J : Jacobian, H : [H_x, H_y, H_z] Hessians of S_x, S_y, S_z
SJH = Tuple[POSITION, JACOBIAN, HESSIAN]

TSV = Tuple[float, POSITION, SPEED]

Add J, H to solutions calculation

Constuire une wrapper qui modifie le comportement d’une interaction en annulant un des coté de la force, ceci simule une interaction uni-directionnelle.
impossible en physique
peut être utile pour simuler des entrainement, des lois de commandes sur des modèles simplifiés.

-----

Autre: projet :
créer un modèle temporelle du pendule inversé et créer un modèle de simulation permettant de modifier l’input de la force en temps réel.
Pemettre d’y connecter d’autres types d’objects et de lois de commands

